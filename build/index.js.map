{"version":3,"file":"index.js","mappings":";;;;;;;;;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAmB,UAAID,IAEvBD,EAAgB,UAAIC,IARtB,CASGK,MAAM,WACT,Y,ICJIC,EAAKC,EAAMC,EAAYC,EALrBC,EAAMC,OAAOC,SAASC,KAGtBC,EAAoBH,OAAOI,YAAYC,SAASC,OAChDC,GAAc,IAAIC,MAAOC,UAE3BC,EAAYV,OAAOI,YAAYO,iBAAiB,YAEpDX,OAAOY,iBAAiB,QAAQ,WAC9BC,IACAC,IACAC,OAGF,IAAMC,EAAoB,SAACC,GACzB,OAAOA,EAAK,KAGRJ,EAAgB,WACe,mBAAxBK,oBAKI,IAAIA,qBAAoB,SAACC,GACtCxB,EAAMqB,EACFG,EAAUC,iBAAiB,0BAA0B,GAAGC,cAIrDC,QAAQ,CAAEC,KAAM,QAASC,UAAU,IAV1CC,QAAQC,MAAM,+DAadC,EAAgBjB,EACfkB,QAAO,SAAUD,GAChB,MAAuC,mBAAhCA,EAAcE,iBAEtBC,KAAI,SAAUH,GACb,MAAO,CACLI,KAAMJ,EAAcI,KACpBF,cAAeF,EAAcE,cAC7BG,aAAcL,EAAcK,aAC5BC,SAAUN,EAAcM,aAGhCR,QAAQS,IAAIP,EAAe,YAE3B,IAAMZ,EAAc,WAClB,IAAMoB,EAAUC,aAAY,WAC1B,IAAIC,EAAO,CACTtC,IAAKA,EACLuC,KAAMlC,YAAYmC,WAClBC,gBAAiB5C,EACjB6C,qBAAsB9C,EACtBG,QAASA,EACTD,WAAYA,EACZa,UAAWiB,GAGbF,QAAQS,IAAI,oCAAqCG,GAEjD,IAAMK,EAAU,CACdC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUV,IAGvBW,MApEQ,qDAoEGN,GAASO,MAAK,SAACC,GAAD,OAAczB,QAAQ0B,MAAMD,MAErDE,cAAcjB,KACb,MAGCrB,EAAuB,WACtBX,GAKLP,EAAOoB,EACHb,EAAkBkD,cAAgBlD,EAAkBmD,iBAExDxD,EAAUkB,EACNb,EAAkBoD,yBAClBpD,EAAkBmD,iBAEtBzD,EAAamB,EACTT,EAAcJ,EAAkBmD,kBAZlC7B,QAAQC,MAAM,uD,UDlElB","sources":["webpack://MyLibrary/webpack/universalModuleDefinition","webpack://MyLibrary/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MyLibrary\"] = factory();\n\telse\n\t\troot[\"MyLibrary\"] = factory();\n})(self, function() {\nreturn ","const api = \"https://perfanalyticsx-api.herokuapp.com/analytics\";\nconst url = window.location.href;\n\n// TODO\nconst performanceTiming = window.performance.toJSON().timing;\nconst currentTime = new Date().valueOf();\nlet fcp, ttfb, windowLoad, domLoad;\nlet resources = window.performance.getEntriesByType(\"resource\");\n\nwindow.addEventListener(\"load\", () => {\n  startObserver();\n  getPerformanceTiming();\n  sendRequest();\n});\n\nconst convertMsToSecond = (ms) => {\n  return ms / 1000;\n};\n\nconst startObserver = () => {\n  if (typeof PerformanceObserver !== \"function\") {\n    console.error(\"PerfanalyticsJS Error : PerformanceObserver NOT supported!\");\n    return;\n  }\n\n  let observer = new PerformanceObserver((entryList) => {\n    fcp = convertMsToSecond(\n        entryList.getEntriesByName(\"first-contentful-paint\")[0].startTime\n    );\n  });\n\n  observer.observe({ type: \"paint\", buffered: true });\n};\n\nlet resourcesData = resources\n    .filter(function (resourcesData) {\n      return resourcesData.initiatorType !== \"xmlhttprequest\";\n    })\n    .map(function (resourcesData) {\n      return {\n        name: resourcesData.name,\n        initiatorType: resourcesData.initiatorType,\n        transferSize: resourcesData.transferSize,\n        duration: resourcesData.duration,\n      };\n    });\nconsole.log(resourcesData, \"tatlÄ± :)\");\n\nconst sendRequest = () => {\n  const request = setInterval(() => {\n    let data = {\n      url: url,\n      date: performance.timeOrigin,\n      timeToFirstByte: ttfb,\n      firstContentfulPaint: fcp,\n      domLoad: domLoad,\n      windowLoad: windowLoad,\n      resources: resourcesData,\n    };\n\n    console.log(\"PerfanalyticsJS Request Object : \", data);\n\n    const options = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(data),\n    };\n\n    fetch(api, options).then((response) => console.debug(response));\n\n    clearInterval(request);\n  }, 500);\n};\n\nconst getPerformanceTiming = () => {\n  if (!performanceTiming) {\n    console.error(\"PerfanalyticsJS Error : Performance NOT supported!\");\n    return;\n  }\n\n  ttfb = convertMsToSecond(\n      performanceTiming.responseStart - performanceTiming.navigationStart\n  );\n  domLoad = convertMsToSecond(\n      performanceTiming.domContentLoadedEventEnd -\n      performanceTiming.navigationStart\n  );\n  windowLoad = convertMsToSecond(\n      currentTime - performanceTiming.navigationStart\n  );\n};\n"],"names":["root","factory","exports","module","define","amd","self","fcp","ttfb","windowLoad","domLoad","url","window","location","href","performanceTiming","performance","toJSON","timing","currentTime","Date","valueOf","resources","getEntriesByType","addEventListener","startObserver","getPerformanceTiming","sendRequest","convertMsToSecond","ms","PerformanceObserver","entryList","getEntriesByName","startTime","observe","type","buffered","console","error","resourcesData","filter","initiatorType","map","name","transferSize","duration","log","request","setInterval","data","date","timeOrigin","timeToFirstByte","firstContentfulPaint","options","method","headers","body","JSON","stringify","fetch","then","response","debug","clearInterval","responseStart","navigationStart","domContentLoadedEventEnd"],"sourceRoot":""}